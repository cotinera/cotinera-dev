Goal
Read the entire codebase starting at index.html, discover the complete tech stack (frontend, backend, data, services, infra, tooling), and produce a thorough system-stack.md that someone new can use to run, build, and deploy the app.

Scope & Rules

Start traversal from index.html and follow all imports/links/scripts/styles to map the app. Then scan the repo recursively to capture everything else (server code, config, CI, infra, etc.).

Do not modify code or secrets. Do not run deployments. Reading/analysis only.

If information is missing/ambiguous, add a clearly labeled Assumptions & Unknowns section with next steps to confirm.

What to Parse (look for these files and infer versions/config)

Frontend: index.html, src/**, public/**, package.json, package-lock.json/yarn.lock/pnpm-lock.yaml, vite.config._, webpack._, rollup._, parcel._, babel._, tsconfig.json, postcss.config._, tailwind.config._, eslint._, prettier._, framework configs (next.config._, nuxt.config._, astro.config._, svelte.config._, angular.json, remix.config._, vue.config.\*).

Backend: server._, app._, api/**, pages/api/**, functions/\*\*, framework files (Express/Fastify/NestJS/Koa/Hono), requirements.txt / pyproject.toml, Pipfile, Gemfile, go.mod, Cargo.toml, composer.json, etc.

Data layer: prisma/schema.prisma, sequelize/typeorm configs, migrations/\*_, schema.sql, drizzle.config._, supabase/firebase files.

Infra/DevOps: Dockerfile, docker-compose.\*, Procfile, replit.nix / flake.nix, Makefile, .github/workflows/**, .gitlab-ci.yml, vercel.json, netlify.toml, render.yaml, fly.toml, railway.json, heroku.yml, terraform/**, pulumi/\*\*.

Config & env: .env\*, .env.example, .tool-versions, .npmrc, .nvmrc.

Observability & security: Sentry/Datadog/New Relic configs, Helmet/CSP, auth config (OAuth, JWT, NextAuth, Clerk, Auth0), rate limiting, CORS, CSRF.

Testing & quality: jest._, vitest._, cypress._, playwright._, pytest.\*, rspec, go test, coverage settings.

Content/i18n/perf: i18n configs, image optimization settings, PWA manifests, Service Workers, robots.txt, sitemap.xml.

Discovery Method

From index.html:

List all <script>, <link>, and module imports; resolve their paths; note frameworks (React/Vue/Svelte/Angular), libraries, CSS frameworks (Tailwind/Bootstrap), icon sets, fonts.

Dependency graph:

Use package.json (or other language manifests) + lockfiles to capture exact versions.

Identify bundler, transpiler, and dev server.

Note SSR/SSG choices (Next.js/Nuxt/Remix/Astro/etc.).

Runtime & hosting:

Determine Node/deno/bun/python/go/ruby/etc. versions from manifests, engines, .tool-versions, Docker images.

Detect hosting targets (Vercel, Netlify, Render, Fly.io, Railway, Cloudflare, Heroku, AWS/GCP/Azure).

Backend & APIs:

Locate routes/endpoints, middleware, and any serverless functions. Identify auth strategy, session storage, CORS.

Database & state:

Identify DB (Postgres/MySQL/SQLite/Mongo/Dynamo/etc.), ORM (Prisma/TypeORM/Sequelize/Drizzle/SQLAlchemy/etc.), migration tooling, and cache (Redis/Upstash/Cloudflare KV).

Build/test/lint/format:

Compile full command table (dev, build, start, preview, test, lint, typecheck, format, migrate, seed).

CI/CD:

Summarize pipelines, triggers, build artifacts, environment matrices.

Security, observability, performance:

List CSP, Helmet, dependency audit tools, Sentry/Datadog, logging libraries, bundle/analyze steps, image optimization, code-splitting, prefetching.

Environment & secrets:

Enumerate required environment variables (from code references and .env.example), mark which are required at build vs runtime, and where they must be set (Replit, Vercel, Docker, etc.). Do not print actual secrets—only names and descriptions.

Gaps:

Record unknowns with precise file paths or patterns to investigate.

Output File
Create a new file at the repo root named system-stack.md with the EXACT structure below. Fill every section you can; keep empty sections with TODOs if needed.

# System Stack

> Generated by repository analysis on {{DATE}}.

## 1) High-Level Overview

- App type: (SPA/SSR/SSG/Hybrid)
- Primary frameworks: (e.g., React 18 + Vite 5)
- Backend/runtime: (e.g., Node 22 + Express)
- Database/cache/message bus:
- Hosting/deployment targets:

## 2) Entry Points & App Topology

- Frontend entry: `index.html` → [list scripts/styles/modules]
- Main application module(s): [paths]
- Backend entry: [path or serverless functions]
- Public assets: [folder(s)]
- Routing (client): [library + routes summary]
- Routing (server): [framework + endpoints summary]

## 3) Frontend Stack

- Language: (JS/TS + version)
- Framework & libs: [exact versions]
- State mgmt: [Redux/Zustand/Context/etc.]
- Styling: [Tailwind/PostCSS/CSS Modules/etc.]
- Bundler/dev server: [Vite/Webpack/Rollup/etc.]
- Testing/e2e: [Jest/Vitest/Cypress/Playwright + versions]
- Performance features: [code-splitting, PWA, SW, image optimization]
- Browser support / polyfills:

## 4) Backend & API

- Runtime: [Node/Deno/Bun/Python/etc. + exact version]
- Framework/middleware: [Express/Nest/Fastify/etc.]
- Auth: [JWT/OAuth/NextAuth/Clerk/Auth0/etc.]
- Sessions/cookies: [store, security flags]
- Notable endpoints:
  - `METHOD /path` – purpose
- Serverless functions (if any): [paths, providers]
- Background jobs/queues: [BullMQ, Celery, etc.]

## 5) Data Layer

- Primary DB: [engine + version]
- ORM/query builder: [Prisma/Drizzle/TypeORM/Sequelize/etc.]
- Migration tool: [and where migrations live]
- Schemas/models overview:
  - Model: fields (type, nullability, indexes)
- Seeds/fixtures: [how to run]
- Caching: [Redis/etc.]
- Files/blob storage: [S3/GCS/Cloudflare R2/etc.]

## 6) Build, Run, Test Commands

| Purpose   | Command | Source file  |
| --------- | ------- | ------------ |
| Dev       | `...`   | package.json |
| Build     | `...`   | package.json |
| Start     | `...`   | package.json |
| Preview   | `...`   | package.json |
| Test      | `...`   | ...          |
| Lint      | `...`   | ...          |
| Typecheck | `...`   | ...          |
| Migrate   | `...`   | ...          |
| Seed      | `...`   | ...          |

## 7) Environment Variables (no secrets)

> Set these in Replit / deployment provider. Mark **Build-time** vs **Runtime**.

- `EXAMPLE_API_KEY` (Runtime) – Used by ...
- `DATABASE_URL` (Runtime) – Connection string for ...
- `NEXT_PUBLIC_...` (Build-time) – Public var for ...

## 8) Deployment Targets & CI/CD

- Targets: [Vercel/Netlify/Render/Fly/Cloudflare/Heroku/AWS/GCP/Azure/Replit]
- Configuration files: [paths]
- Build output: [folder/artifacts]
- CI pipelines: [workflows, triggers, cache, test steps, deploy steps]
- Docker: [image base, ports, envs, compose services]

## 9) Observability, Security & Compliance

- Logs/metrics/tracing: [Sentry/Datadog/etc.]
- Security headers/CSP: [source of config]
- Rate limiting/CORS/CSRF: [how configured]
- Dependency scanning/audit: [tools in use]
- Data protection: [encryption at rest/transit, PII handling]

## 10) Third-Party Services & Integrations

- Payments: [Stripe/etc.]
- Auth providers: [Google/GitHub/etc.]
- Email/SMS: [SendGrid/Twilio/etc.]
- Maps/storage/AI/etc.: [list + purpose]

## 11) Project Conventions & Tooling

- Package manager: [npm/yarn/pnpm + lockfile]
- Code style: [ESLint/Prettier configs]
- Commit/branching/versioning: [Conventional Commits, SemVer, Git Flow]
- Monorepo setup (if any): [pnpm workspaces/Turborepo/Nx]

## 12) Data Model Diagram (Mermaid)

```mermaid
erDiagram
  TABLE_1 {
    TYPE id PK
    TYPE field1
  }
  TABLE_2 {
    TYPE id PK
    TYPE fieldA
  }
  TABLE_1 ||--o{ TABLE_2 : "relation"


(Replace with real models or omit if not applicable.)

13) Dependency Graph (Mermaid)
graph TD
  frontend-->bundler
  frontend-->framework
  backend-->db
  backend-->cache


(Replace with actual modules/libraries.)

14) How to Run Locally

Prereqs: [Node X / Python Y / Docker / Replit Nix]

Install deps: ...

Env: copy .env.example → .env and set values.

Start dev: ...

Open at: http://localhost:...

15) Build & Deploy Steps

Build command(s): ...

Deploy steps by provider (Vercel/Netlify/etc.): ...

Migrations/seeds in deploy: ...

Post-deploy checks: ...

16) Known Risks, Assumptions & TODOs

 Example: Node version inferred from Dockerfile, confirm against .tool-versions.

 Example: Missing DATABASE_URL in .env.example.

Appendix A: Exact Dependencies (by manifest)

package.json: [name@version list of top-level deps and devDeps]

Other manifests: [requirements.txt/Gemfile/etc.]

Appendix B: File Map (key files only)

index.html – entry point

src/main.tsx – SPA bootstrap

api/** – backend endpoints

prisma/schema.prisma – DB schema

.github/workflows/ci.yml – CI pipeline
```
